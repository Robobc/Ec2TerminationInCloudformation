######## Disclaimer ################
#  This AWS CloudFormation template is for demonstration purposes only and not for production use. 
#  It is provided as-is, without warranty of any kind. Users should carefully review and test all 
#  components before considering for any production environment. This template may lack features 
#  necessary for production environments including, but not limited to, security, reliability, 
#  and scalability considerations.
####################################
AWSTemplateFormatVersion: '2010-09-09'
Description: EC2 instance replacement with new AMI

Parameters:
  NewAmiId:
    Type: AWS::EC2::Image::Id
    Description: The ID of the new AMI to use for the instance
  OldAmiId:
    Type: AWS::EC2::Image::Id
    Description: The ID of the old AMI to use for the instance
  myEC2iD:
    Description: The ID of the running EC2 instance
    Type: String

Resources:
  CustomResource:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt LambdaFunction.Arn
      InstanceId: !Ref myEC2iD
      NewAmiId: !Ref NewAmiId
      OldAmiId: !Ref OldAmiId

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess

  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import boto3
          import cfnresponse

          def lambda_handler(event, context):
              ec2 = boto3.client('ec2')
              instance_id = event['ResourceProperties']['InstanceId']
              new_ami_id = event['ResourceProperties']['NewAmiId']
              old_ami_id = event['ResourceProperties']['OldAmiId']

              if new_ami_id != old_ami_id:
                  ec2.terminate_instances(InstanceIds=[instance_id])
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
              else:
                  cfnresponse.send(event, context, cfnresponse.SUCCESS, {})

      Handler: index.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.9
      Timeout: 700

  myENI:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Tags:
        - Key: stack
          Value: production
      Description: A nice description.
      SourceDestCheck: 'false'
      GroupSet:
        - <InsertYourSGiD>
      SubnetId: <InsertYourSubnetId>
      PrivateIpAddress: <InsertYourPrivateIP>

  myEC2:
    DependsOn: LambdaFunction
    Type: AWS::EC2::Instance
    Properties:
      Tags:
        - Key: stack
          Value: production
      ImageId: !Ref NewAmiId
      InstanceType: t2.micro
      KeyName: ec2-keypair-us
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref myENI
          DeviceIndex: 0
          DeleteOnTermination: 'false'

Outputs:
  InstanceId:
    Value: !Ref myEC2